Program -> Declaration-list $
Declaration-list -> Declaration Declaration-list
Declaration-list -> ε
Declaration -> Declaration-initial Declaration-prime #pop
Declaration-initial -> Type-specifier #declare_id #pid ID
Declaration-prime -> Fun-declaration-prime
Declaration-prime -> Var-declaration-prime
Var-declaration-prime -> ;
Var-declaration-prime -> [ #pnum NUM ] #declare_arr ;
Fun-declaration-prime -> #declare_func ( #arg_init Params #arg_finish ) Compound-stmt
Type-specifier -> int
Type-specifier -> void
Params -> int #declare_id #pid ID Param-prime #pop Param-list
Params -> void Param-list-void-abtar
Param-list-void-abtar -> #declare_id #pid ID Param-prime Param-list
Param-list-void-abtar -> ε
Param-list -> , Param Param-list #pop
Param-list -> ε
Param -> Declaration-initial Param-prime
Param-prime -> [ ]
Param-prime -> ε
Compound-stmt -> { #sc_start Declaration-list Statement-list #sc_stop }
Statement-list -> Statement Statement-list
Statement-list -> ε
Statement -> Expression-stmt
Statement -> Compound-stmt
Statement -> Selection-stmt
Statement -> Iteration-stmt
Statement -> Return-stmt
Statement -> Switch-stmt
Expression-stmt -> Expression #pop ;
Expression-stmt -> break #prison ;
Expression-stmt -> ;
Selection-stmt -> if ( Expression ) #sc_start #hold Statement  #sc_stop #prison #decide else #sc_start Statement #sc_stop #prison_break
Iteration-stmt -> while #label ( Expression ) #sc_start #hold Statement #jump_while #decide #sc_stop
Return-stmt -> return Return-stmt-prime
Return-stmt-prime -> ;
Return-stmt-prime -> Expression #pop ;
Switch-stmt -> switch ( Expression ) { #sc_start Case-stmts Default-stmt #sc_stop }
Case-stmts -> Case-stmt Case-stmts
Case-stmts -> ε
Case-stmt -> case #pnum NUM #case #hold : Statement-list #decide
Default-stmt -> default : Statement-list #prison
Default-stmt -> ε
Expression -> Simple-expression-zegond
Expression -> #pid ID B
B -> = Expression #assign
B -> [ Expression ] #parr H
B -> Simple-expression-prime
H -> = Expression #assign
H -> G D C
Simple-expression-zegond -> Additive-expression-zegond C
Simple-expression-prime -> Additive-expression-prime C
C -> Relop Additive-expression #op_exec
C -> ε
Relop -> #op_push <
Relop -> #op_push ==
Additive-expression -> Term D
Additive-expression-prime -> Term-prime D
Additive-expression-zegond -> Term-zegond D
D -> Addop Term #op_exec D
D -> ε
Addop -> #op_push +
Addop -> #op_push -
Term -> Signed-factor G
Term-prime -> Signed-factor-prime G
Term-zegond -> Signed-factor-zegond G
G -> #op_push * Signed-factor #op_exec G
G -> ε
Signed-factor -> + Factor 
Signed-factor -> #pzero #op_push - Factor #op_exec
Signed-factor -> Factor
Signed-factor-prime -> Factor-prime
Signed-factor-zegond -> + Factor 
Signed-factor-zegond -> #pzero #op_push - Factor #op_exec
Signed-factor-zegond -> Factor-zegond
Factor -> ( Expression )
Factor -> #pid ID Var-call-prime
Factor -> #pnum NUM
Var-call-prime -> ( Args )
Var-call-prime -> Var-prime
Var-prime -> [ Expression ] #parr
Var-prime -> ε
Factor-prime -> ( Args ) #call #output
Factor-prime -> ε
Factor-zegond -> ( Expression )
Factor-zegond -> #pnum NUM
Args -> Arg-list
Args -> ε
Arg-list -> Expression Arg-list-prime
Arg-list-prime -> , Expression Arg-list-prime
Arg-list-prime -> ε